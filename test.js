// generated by http://npmjs.com/tinit

const assert = require("assert");
const { applyMiddleware, createStore, combineReducers } = require("redux");
const { StoreService } = require("./lib/StoreService");

/*------------------/
     START TESTS
/------------------*/
// write simple tests here, for more depth grab something like Jest

let store;
let service;
let counterReducer;

const ACTION = {
  INCREASE: "INCREASE",
  DECREASE: "DECREASE"
};

test("create an unattached store", () => {
  counterReducer = (state = { value: 0 }, action) => {
    if (action.type === ACTION.INCREASE) {
      state.value += action.payload || 1;
    }
    if (action.type === ACTION.DECREASE) {
      state.value -= action.payload || 1;
    }
    return state;
  }
  store = createStore(counterReducer);
  assert(store);
  for (let i=0; i<3; i++) {
    store.dispatch({ type: ACTION.INCREASE, payload: 1 });
  }
  assert(store.getState().value === 3, "value is " + store.getState().value);
  store.dispatch({ type: ACTION.DECREASE, payload: 2 });
  assert(store.getState().value === 1, "value is " + store.getState().value);
});

test("attach to the store", () => {
  service = StoreService.define(
    class TestService extends StoreService {
      constructor() {
        super("testData", { a: 1, b: 2 });
      }

      increaseA() {
        this.setState({ a: this.state.a + 1 });
      }
    }
  );
  store = createStore(
    combineReducers({
      ...counterReducer,
      ...StoreService.getReducers()
    }),
    applyMiddleware(
      ...StoreService.getMiddlewares()
    )
  );
});

test("the service can update itself", () => {
  service.increaseA();
  assert(service.state.a === 2);
});

test("the service can update the store", async () => {
  service.increaseA();
  //await new Promise(r => setTimeout(r, 100));
  assert(store.getState().testData.a === 3);
});

test("the store can update the service when affecting its slice", () => {
  throw new Error("deliberate error");
});

test("the store skips the service when not affecting its slice", () => {
  throw new Error("deliberate error");
});

/*------------------/
     END TESTS
/------------------*/

/**
 * @param text printed description of test
 * @param func a function / promise / async that throws upon test fail
 */
function test(text, func) {
  (test.all = test.all || []).push({ i: test.all.length, text, func });
}
(async () => { // autorun
  const log = (msg, c) => process.stdout.write((["\033[32m", "\033[31m"][c] || "")+msg+"\033[0m");
  log("tinit running " + test.all.length + " tests...\n");
  while ((t = test.all.shift())) {
    log(" > " + (t.i+1) + ". " + t.text + "...");
    try { await t.func(); } catch (e) {
      return log("FAIL\n" + (e && e.stack || e) + "\n", 1);
    };
    log("PASS\n", 0);
  }
})();
